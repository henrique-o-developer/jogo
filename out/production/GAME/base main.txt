import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Media;
import java.awt.image.BufferStrategy;

import javax.swing.JFrame;

public class Main.Main extends Canvas implements Runnable {
	private static final long serialVersionUID = 1L;
	public static JFrame frame;
	private Thread thread;
	public static boolean isRunning = true;
	public static double FPS = 60, fps = 0, ffps = FPS;
	public static int WIDTH = 240, HEIGHT = 160, SCALE = 5;
	private BufferedImage image;

	public Main.Main() {
		setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		initFrame();
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	}

	public synchronized void start() {
		thread = new Thread(this);
		isRunning = true;
		thread.start();
	}

	public synchronized void stop() {
		isRunning = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public void initFrame() {
		frame = new JFrame();
		frame.add(this);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}

	public static void main(String args[]) {
		Main.Main game = new Main.Main();
		game.start();
	}

	public void tick() {
		WIDTH = (int) frame.getWidth() / SCALE;
		HEIGHT = (int) frame.getHeight() / SCALE;
	}

	public void render() {
		BufferStrategy bs = this.getBufferStrategy();

		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}

		if (image.getWidth() != WIDTH || image.getHeight() != HEIGHT) {
			image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		}

		Media g = image.getGraphics();
		g.setColor(new Color(40, 40, 40));
		g.fillRect(0, 0, WIDTH, HEIGHT);
		g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, WIDTH * SCALE, HEIGHT * SCALE, null);
		g.setFont(new Font("Arial", Font.BOLD, 10));
		g.setColor(new Color(255, 255, 255));
		g.drawString("fps: " + fps + ", media fps: " + ffps + ", fps esperado: " + FPS, 3, 10);
		bs.show();
	}

	public void run() {
		long lastTime = System.nanoTime();
		double ns = 1000000000 / FPS;
		double delta = 0;
		double timer = System.currentTimeMillis();
		while (isRunning) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;

			if (delta >= 1) {
				tick();
				render();
				fps++;
				delta--;
			}


			if (System.currentTimeMillis() - timer >= 1000) {
				ffps = fps;
				fps = 0;
				timer = System.currentTimeMillis();
			}
		}

		stop();
	}

}